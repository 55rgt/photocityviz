3/10(일) ~ 3/16(토)

3/17(일) ~ 3/23(토)

3/24(일) ~ 3/30(토): 기획서 발표(3/25)

3/31(일) ~ 4/6(토)

4/7(일) ~ 4/13(토)

4/14(일) ~ 4/20(토)

4/21(일) ~ 4/27(토)

4/28(일) ~ 5/4(토)

5/5(일) ~ 5/11(토)

5/12(일) ~ 5/18(토): Finish


크게 해야할 작업

1. 프로그래밍

1-A. 데이터
Todo 0: 1년 기간의 데이터를 수집
=> 데이터 수집 자체에 엄청난 시간이 걸릴 수 있다.
=> 하나의 국가가 얼마나 걸리는지 보고, 계획을 조절해야 할듯.
[1차 데이터 수집 후보 (가능한 대륙 별)]
#buenosairesargentina (약 14만 건)
#cancunmexico (약 30만 건)
#cairoegypt (약 17만 건)
#oslonorway (약 8만 건)
#londonuk (약 10만 건)
#tokyojapan (약 21만 건)
-이후, 데이터 처리를 해야 함.
Todo 1: 광고성 사진 걸러내기
Todo 2: Google Vision API를 사용하여 Labels + Properties 모으기.
=> 2를 먼저 하고, 광고인 애들의 라벨을 대충 파악하여 (사진 + 2의 json)을 삭제하는 코드를 만들면 좋다.
Todo 3: 사진에서 메타데이터 추출 (ExifTool 등 이용)
Todo 4: Image Resizing
-데이터 정제를 해야 함.
=> 얘는 모든 사진이 모여야 완벽히 할 수 있음.
Todo 5: 모든 사진의 라벨을 카운팅하여 내림차순 정렬하기
Todo 6: 4번에서 했던 걸 중분류 -> 소분류화하기
=> 4번과 5번은 매뉴얼로 하는 것인지, 분류 / 클러스터링을 해서 하는 것인지 알아봐야 함.
Todo 7: Label + Property + Metadata 를 기반으로 하는 최종 json 파일 만들기
=> 1시간 단위로 시각화를 할 예정이므로
-데이터베이스에 넣어야 할 수도 있다.
Todo 8: 7번의 데이터와 4번의 데이터가 크다면, DB에 넣어야 한다.
=> Spiral 데이터와 RadViz 데이터가 따로 있으면 좋겠다. (우선은 Spiral만)
=> 이게 말이 안 되는게 옵션에서 카테고리 선택할 때마다 색상 및 높이가 달라져야 하므로 애초부터 모든 개별 사진이 다 각각 들어가 있어야 한다.
=> 노드마다 대표 색상과 label 최소 값을 미리 고정을 시켜 놓고 적당히만 들여 오도록 하자.
=> 그리고 대표 색상을 그대로 넣는 것이 아니라 rgba 대표 몇 개에 대한 코드를 넣는다.


[필요한 것]
-색상 linear mapping 가능한 무언가

1-B. 백엔드
Todo 1: DB에서 불러오는 코드 만들기
=> 얘가 보통 쉬운 일이 아니다. 데이터가 많을 수 있는데, 효율적으로 짜야 속도가 향상된다.
=> 아마 MongoDB로 하는 게 좋을듯.
-추가예정

1-C. 프론트엔드

Todo 0: rgba 코드 json
Todo 1: 왼쪽 navigation bar (plot mode/category/duration/threshold)
Todo 2: 메인 뷰 1) Spiral
  Todo 2-1: Spiral에 데이터 매핑해서 그리기
    => 높이를 파악하려면 8번 과정에서 EDA로 Min, Max에 대한 정보를 미리 알고 있어야 할 듯.
    => Heatmap의 성격을 넣을 생각이므로 저 EDA를 잘 해야 함
    => 그라데이션이 가능하면 짱짱맨일 수 있다.
  Todo 2-2: Tooltip
    => Bar를 hover하면 그 주변부 위치에 정보가 떠야 함
  Todo 2-3: 옵션에 반응형이어야 함.
    => 옵션을 조절하면 그에 따라 달라져야 함.
    => ex1) 시간 조절: 그 시간이 아닌 데이터에 해당하는 바 차트는 grey-out / sub view 에도 event trigger
    => ex2) category: 얘가 진짜 중요한데, 카테고리 toggle할 때마다 main view, subview가 바뀌어야 한다.
    => 결국 얘는 카테고리를 누르면 데이터베이스에서 데이터를 갈아 주는 형식이므로, 시간이 많이 소요될 것.
    => debounce 와 circular progress indicator를 활용하는 것이 베스트일 것 같다.
Todo 3: 메인 뷰 2) RadViz (얘는 시간이 안 될 경우에는 일단 2번을 먼저 하고 한다.)
Todo 4: 서브 뷰 => 기획도 필요하다.
Todo 5: Animated Effect
  => 얘는 아마 제 시간 내에 할 수 있을 가능성이 1조 2000억 퍼센트일 것 같긴 하지만, 사람이 너무 비관적이면 별로 도움 되는 것이 없기 때문에 일단은 걍 넣어 놓는다.
  => 제일 베스트는 할 때마다 애니메이션을 고려한 코드를 짜는 것.

[필요한 것들]
-색상 linear mapping 가능한 무언가
-서브 뷰 기획

2. 기획

3. 디자인

