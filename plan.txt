4/14(일) ~ 4/20(토)

4/21(일) ~ 4/27(토)

4/28(일) ~ 5/4(토)

5/5(일) ~ 5/11(토)

5/12(일) ~ 5/18(토): Finish


크게 해야할 작업

1. 프로그래밍

1-A. 데이터
Todo 0: 1년 기간의 데이터를 수집 (2018.03.01 ~ 2019.02.28)
=> #oslonorway(약 8만 건 추정)를 1년 수집하는데 24시간 정도가 걸렸고, 약 6.4만 장 정도 수집했다. 5:4 비율로 생각하면 될 듯 + 3시간에 8천장으로 생각.
[데이터 수집 후보 (가능한 대륙 별)] #buenosairesargentina (약 14만 건), #cancunmexico (약 30만 건), #cairoegypt (약 17만 건), #oslonorway (약 8만 건), #londonuk (약 10만 건) ,#tokyojapan (약 21만 건)
Todo 1: Google Vision API를 사용 #완료#
  + 각각 1년치 자료 합산하기 #완료#
Todo 2: 사진에서 메타데이터 추출 (ExifTool 등 이용) #완료#
  + 각각 1년치 자료 합산하기 #완료#
Todo 3: Image Resizing #완료#
Todo 10부터 먼저 한다.
Todo 4: 라벨 카운팅 및 정제
  => toLowerCase로 정제
  => 카운트 일정 이하는 지우기
  => 라벨 분류는 모든 데이터가 있어야 될 수도 있다.
Todo 5: 4번에서 했던 걸 대분류 -> 중분류 -> 소분류화하기
  => 이거 매뉴얼하게 하는 건 좀 힘들다. 카운팅 n 이하는 삭제하고, 데이터를 변경한 다음에  clustering / classification 등의 방법이 있는지
Todo 6: 해시태그 카운팅 및 정제(wordnik으로 되나?)
  => 카운트 일정 이하는 지우기, 띄어쓰기, 특수문자 등 고려해서 정제
  => 일단은 카운트 일정 이하 지우기만 하자
  /*
  "hashTags": [
        "oslonorway",
        "corvid",
        "nuts_about_birds",
        "fuglerinorge",
        "corvuscornix",
        "oslofjorden",
        "crows",
        "kråke",
        "birds",
        "birdsofinstagram",
        "instabird",
        "urbanwildlife"
  ]
  "hashTags_m": [ "oslo", "norway", "birds", "instagram", "life", "urban", "wild"]
  */
  1. 외국어 처리
  => Google Translation 이용
  2. 띄어쓰기 처리
  => 무조건 api 찾아야 함 안 찾으면 못 함
  3. 오탈자나 이상한 단어 처리
  => 처리 못 할 수도 있음. 정확성 낮아지더라도 무시하는 게 나을 수도 있다.
Todo 7: 색상 정제 (이미지 Property를 이미지 linear mapping 으로 변환하기)
  => HSL palette 만들기 => HSL -> LAB 변환 => DeltaE 2000
  => 근데 이게 남색 30% 노란색 15% ... 짙은남색 42% 이러니까 얘들을 변환해서 같은 건 합쳐야 할 것 같다.
  => color palette가 현재 36개짜린데, 얘의 단점은 회색 계열을 반영하지 못하는 것에 있다. 따라서, 이걸 처리해야 할 것 같음.
  => 2개를 하지 말고 3~4개까지 그라데이션을 하는 건 어떤지
  => 근데 주색상, 부색상이 필요가 없다. 주색상만 하고 카운팅해서 나오는 걸 가지고 해야지
Todo 8: Label + Property + Metadata 를 기반으로 하는 최종 json 파일 만들기
  => 1시간 단위로 시각화를 할 예정이므로 property 적절히 파악하여 추가
  /*
    {
      "Group": oslo,
      "File": "test.jpg",
      "HashTags": [],
      "Date": "2018-06-29",
      "Hour": 3,
      "Color": {
                  "43": 21.34,
                  "45": 23.62,
                  "73": 14.46,
                  "74": 14.98
              },
              "Labels": {
                  "season": {
                      "winter": 3.971
                  },
                  "activity": {
                      "fun": 0.768,
                      "tour": 0.729,
                      "leisure": 0.624
                  },
                  "human": {
                      "product": 1.47
                  }
              }
    }
  */
Todo 9: DB에 넣기
  => 노드마다 대표 색상과 label 최소 값을 미리 고정을 시켜 놓고 적당히만 들여 오도록 하자.
  => 그리고 대표 색상을 그대로 넣는 것이 아니라 rgba 대표 몇 개에 대한 코드를 넣는다.
Todo 10: 광고성 데이터 및 사진 걸러내기
  => 광고인 애들의 라벨을 대충 파악하여 사진 + json object를 삭제하는 코드를 만들면 좋다.
Todo 11: 구글 저장소에 사진 넣기
  => 이거 하려면 데이터에 id 값 같은 걸 넣어야 할 수도 있다. (아니면 제목으로 찾던지)

[필요한 것]
-색상 linear mapping 가능한 무언가

1-C. 프론트엔드

<Scenario>
1) 데이터 필터링에서 데이터 변경 후, K-means Clustering 버튼을 누른다, 사용자가 K 값을 조작할 수 있음. (range 등으로)
2) 후보들이 나온다. (적합한 순서대로 -> K값에 따라서, 가장 recommended 가 맨 위에 나오는 식)
3) 가장 위에 있는 애가 메인뷰로 그려짐. (후보들을 누를 때마다 메인뷰가 다시 그려짐)
=> 얘는 필터링 된 데이터에 사진 이름을 리스팅하거나 해서 있던 애들은 위치가 바뀌는 애니메이션을, 없던 애들은 그냥 생겨나게, 없어진 애들은 그냥 없어지게 등 애니메이션 구상
=> 그룹의 양을 보고 샘플링을 해서 사진을 넣어야 할 수도 있을 듯하다.
4) 메인 뷰 아래에는 옵션이 꼭 있어야 하나? (메인 뷰 구상)
=> 특정 그룹을 클릭하면 연관 정도에 따른 화살표 Up - Down 효과?? or shortcut heatmap
=> 옵션에 따라 서브 뷰가 바뀜
=> 선택된 그룹에도 shading 효과 등 필요
5) 서브 뷰 구상해야 함
