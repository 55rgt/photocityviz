3/17(일) ~ 3/23(토)
-데이터 처리 완료
-메인 뷰 및 서브 뷰 확정
-nav container 완료

3/24(일) ~ 3/30(토): 기획서 발표(3/25)
-교수님께 기획서 메일 보내드리기
-메인뷰 제작 시작
-서브뷰 제작 시작

3/31(일) ~ 4/6(토)
-데이터 추가 수집 시작

4/7(일) ~ 4/13(토)

4/14(일) ~ 4/20(토)

4/21(일) ~ 4/27(토)

4/28(일) ~ 5/4(토)

5/5(일) ~ 5/11(토)

5/12(일) ~ 5/18(토): Finish


크게 해야할 작업

1. 프로그래밍

1-A. 데이터
Todo 0: 1년 기간의 데이터를 수집 (2018.03.01 ~ 2019.02.28)
=> #oslonorway(약 8만 건 추정)를 1년 수집하는데 24시간 정도가 걸렸고, 약 6.4만 장 정도 수집했다. 5:4 비율로 생각하면 될 듯 + 3시간에 8천장으로 생각.
[데이터 수집 후보 (가능한 대륙 별)] #buenosairesargentina (약 14만 건), #cancunmexico (약 30만 건), #cairoegypt (약 17만 건), #oslonorway (약 8만 건), #londonuk (약 10만 건) ,#tokyojapan (약 21만 건)
Todo 1: Google Vision API를 사용 #완료#
  + 각각 1년치 자료 합산하기 #완료#
Todo 2: 사진에서 메타데이터 추출 (ExifTool 등 이용) #완료#
  + 각각 1년치 자료 합산하기 #완료#
Todo 3: Image Resizing #완료#
Todo 4: 라벨 카운팅 및 정제
  => toLowerCase로 정제
  => 카운트 일정 이하는 지우기
Todo 5: 4번에서 했던 걸 대분류 -> 중분류 -> 소분류화하기
Todo 6: 해시태그 카운팅 및 정제(wordnik으로 되나?)
  => 카운트 일정 이하는 지우기, 띄어쓰기, 특수문자 등 고려해서 정제
  => 일단은 카운트 일정 이하 지우기만 하자
Todo 7: 색상 정제 (이미지 Property를 이미지 linear mapping 으로 변환하기)
  => 근데 이게 남색 30% 노란색 15% ... 짙은남색 42% 이러니까 얘들을 변환해서 같은 건 합쳐야 할 것 같다.
Todo 8: Label + Property + Metadata 를 기반으로 하는 최종 json 파일 만들기
  => 1시간 단위로 시각화를 할 예정이므로 property 적절히 파악하여 추가
  /*
    {
      "City": oslo,
      "Name": "test.jpg",
      "HashTags": [],
      "Primary": {
        "Color": 1 // 미리 정해진 코드
        "Proportion": 0.32
      },
      "Secondary": {
        "Color": 5 // 미리 정해진 코드
        "Proportion": 0.24
      },
      "Labels": {
        "중분류1": {
          "소분류1": 0.883, // 소수점 네번째에서 반올림 (세자리까지),
          "소분류2": 0.831, // 소수점 네번째에서 반올림 (세자리까지),
          "소분류3": 0.740, // 소수점 네번째에서 반올림 (세자리까지)
        },
        "중분류1": {
          "소분류13": 0.783, // 소수점 네번째에서 반올림 (세자리까지),
          "소분류14": 0.731, // 소수점 네번째에서 반올림 (세자리까지),
        },
      }
    }
  */
Todo 9: DB에 넣기
  => 노드마다 대표 색상과 label 최소 값을 미리 고정을 시켜 놓고 적당히만 들여 오도록 하자.
  => 그리고 대표 색상을 그대로 넣는 것이 아니라 rgba 대표 몇 개에 대한 코드를 넣는다.
Todo 10: 광고성 데이터 및 사진 걸러내기
  => 광고인 애들의 라벨을 대충 파악하여 사진 + json object를 삭제하는 코드를 만들면 좋다.


[필요한 것]
-색상 linear mapping 가능한 무언가

1-B. 백엔드
Todo 1: DB에서 불러오는 코드 만들기
=> 얘가 보통 쉬운 일이 아니다. 데이터가 많을 수 있는데, 효율적으로 짜야 속도가 향상된다.
=> 아마 MongoDB로 하는 게 좋을듯.
-추가예정

1-C. 프론트엔드

Force 원칙
=> 소분류 라벨 값들 * 각각의 weight를 합산해 더한 것으로 중분류 force를 추정하고,
=> 또 각각의 중분류 라벨 값들 * 각각의 weight를 합산해 더한 것으로 대분류 force를 결정
Todo 0: rgba 코드 json
Todo 1: 왼쪽 navigation bar (plot mode/category/duration/threshold)
Todo 2: 메인 뷰 1) Spiral
  Todo 2-1: Spiral에 데이터 매핑해서 그리기
    => 높이를 파악하려면 8번 과정에서 EDA로 Min, Max에 대한 정보를 미리 알고 있어야 할 듯.
    => Heatmap의 성격을 넣을 생각이므로 저 EDA를 잘 해야 함
    => 그라데이션이 가능하면 짱짱맨일 수 있다.
  Todo 2-2: Tooltip
    => Bar를 hover하면 그 주변부 위치에 정보가 떠야 함
  Todo 2-3: 옵션에 반응형이어야 함.
    => 옵션을 조절하면 그에 따라 달라져야 함.
    => ex1) 시간 조절: 그 시간이 아닌 데이터에 해당하는 바 차트는 grey-out / sub view 에도 event trigger
    => ex2) category: 얘가 진짜 중요한데, 카테고리 toggle할 때마다 main view, subview가 바뀌어야 한다.
    => 결국 얘는 카테고리를 누르면 데이터베이스에서 데이터를 갈아 주는 형식이므로, 시간이 많이 소요될 것.
    => debounce 와 circular progress indicator를 활용하는 것이 베스트일 것 같다.
Todo 3: 메인 뷰 2) RadViz (얘는 시간이 안 될 경우에는 일단 2번을 먼저 하고 한다.)
Todo 4: 서브 뷰 => 기획도 필요하다.
Todo 5: Animated Effect
  => 얘는 아마 제 시간 내에 할 수 있을 가능성이 1조 2000억 퍼센트일 것 같긴 하지만, 사람이 너무 비관적이면 별로 도움 되는 것이 없기 때문에 일단은 걍 넣어 놓는다.
  => 제일 베스트는 할 때마다 애니메이션을 고려한 코드를 짜는 것.

[필요한 것들]
-색상 linear mapping 가능한 무언가
-서브 뷰 기획

2. 기획

3. 디자인

vuex, component 등을 효과적으로 사용하는 방향으로 가야할 것 같음
